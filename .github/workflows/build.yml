name: Release nightly

on:
  push:
    branches:
      - master
    paths:
      - repos/**
      - .github/workflows/build.yml

  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          # TODO: Get host platform from somewher instead of specifying it explicitly here.
          - os: macos-latest
            bundle_os: macos
            emacs-version: '28.1'
            ext: dylib
            host: x86_64-apple-darwin
          - os: macos-latest
            bundle_os: macos
            emacs-version: '28.1'
            ext: dylib
            target: aarch64-apple-darwin
          - os: ubuntu-20.04
            bundle_os: linux
            emacs-version: '28.1'
            ext: so
            host: x86_64-unknown-linux-gnu
          - os: windows-latest
            bundle_os: windows
            emacs-version: '28.1'
            ext: dll
            host: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      # - name: Install rust toolchain
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     override: true

      - run: .github/script/setup

      - name: Install tree-sitter CLI
        run: npm install -g tree-sitter-cli

      - uses: purcell/setup-emacs@master
        if: runner.os != 'Windows'
        with:
          version: ${{ matrix.emacs-version }}
      # Seems like the Emacs archive from GNU's FTP uses its own outdated bundle of CA certs, which
      # wouldn't include the new LetsEncrypt's root CA cert, which is used by MELPA, among others.
      # So we use mingw64's Emacs instead. TODO: Switch back whenever possible.
      - uses: jcs090218/setup-emacs-windows@master
        if: runner.os == 'Windows'
        with:
          version: ${{ matrix.emacs-version }}

      - run: .github/script/setup-cask
      - run: cask install

      - name: Determine version
        if: runner.os != 'Windows'
        run: |
          echo BUNDLE_VERSION=$(script/bundle-version-prefix).${{ github.run_number }} >> $GITHUB_ENV

      - name: Determine version
        if: runner.os == 'Windows'
        run: |
          $bundle_version = ((script/bundle-version-prefix) | Out-String).Trim()
          echo BUNDLE_VERSION=$bundle_version.${{ github.run_number }} >> $env:GITHUB_ENV

      - run: script/compile all -target "${{ matrix.target }}" -version "${{ env.BUNDLE_VERSION  }}"
        continue-on-error: ${{ runner.os != 'Windows' }}

      - run: script/inspect-binaries
        continue-on-error: true
        id: inpsect_binary

      - name: Rename cross-compilation's binary
        if: matrix.target
        run: |
          mv tree-sitter-grammars-${{ matrix.bundle_os }}-${{ env.BUNDLE_VERSION }}.tar.gz tree-sitter-grammars.${{ matrix.target }}.v${{ env.BUNDLE_VERSION }}.tar.gz
      - name: Make a target-explicit copy of native compilation's binary
        if: ${{ !matrix.target && matrix.host }}
        shell: bash
        run: |
          mv tree-sitter-grammars-${{ matrix.bundle_os }}-${{ env.BUNDLE_VERSION }}.tar.gz tree-sitter-grammars.${{ matrix.host }}.v${{ env.BUNDLE_VERSION }}.tar.gz

      - name: Upload binary
        if: steps.inspect_binary.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: tree-sitter-grammars
          path: tree-sitter-grammars*.tar.gz
          if-no-files-found: error

    outputs:
      version: ${{ env.BUNDLE_VERSION }}

  publish:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v2
        with:
          name: tree-sitter-grammars
      - run: ls -R

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          prerelease: true
          files: |
            tree-sitter-grammars*.tar.gz
